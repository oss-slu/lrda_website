import React, { useState, useEffect } from "react";
import { XIcon } from "lucide-react";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";

// Define the Tag interface to include label and origin properties
interface Tag {
  label: string;
  origin: "user" | "ai";
}

// Define the props for the TagManager component
interface TagManagerProps {
  inputTags?: Tag[]; // Initial tags passed to the component
  suggestedTags?: string[]; // Suggested tags generated by the AI
  onTagsChange: (tags: Tag[]) => void; // Callback to notify parent of tag changes
  fetchSuggestedTags: () => void; // Function to fetch suggested tags
}

// TagManager component
const TagManager: React.FC<TagManagerProps> = ({
  inputTags = [],
  suggestedTags,
  onTagsChange,
  fetchSuggestedTags,
}) => {
  // State for managing tags and the input value
  const [tags, setTags] = useState<Tag[]>(inputTags);
  const [tagInput, setTagInput] = useState("");

  // Update local state when inputTags prop changes
  useEffect(() => {
    if (inputTags !== tags) {
      setTags(inputTags || []);
    }
  }, [inputTags]);

  // Function to add a tag
  const addTag = (tag: string, origin: "user" | "ai") => {
    // Validate tag: no spaces and longer than 2 characters
    if (tag.includes(" ")) {
      toast("Failed to add tag", {
        description: "Your tag must not contain spaces.",
        duration: 2000,
      });
      setTagInput("");
      return;
    }
    if (tag.length <= 2) {
      toast("Failed to add tag", {
        description: "Tags must be longer than 2 characters.",
        duration: 2000,
      });
      return;
    }
    // Check for duplicate tags
    if (tags.find((t) => t.label === tag)) {
      toast("Failed to add tag", {
        description: "Duplicate tags are not allowed.",
        duration: 2000,
      });
      setTagInput("");
      return;
    }
    // Add the tag if valid
    if (tag && tag.length > 2 && !tag.includes(" ")) {
      const newTag = { label: tag, origin };
      setTags((prevTags) => {
        const updatedTags = [...prevTags, newTag];
        onTagsChange(updatedTags); // Notify parent component of tag changes
        return updatedTags;
      });
      setTagInput(""); // Clear input field
    }
  };

  // Function to remove a tag
  const removeTag = (tagToRemove: string) => {
    setTags((prevTags) => {
      const updatedTags = prevTags.filter((tag) => tag.label !== tagToRemove);
      onTagsChange(updatedTags); // Notify parent component of tag changes
      return updatedTags;
    });
  };

  // Handle Enter key press to add a tag
  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      addTag(tagInput, "user");
    }
  };

  // Handle input change to update state
  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setTagInput(event.target.value);
  };

  // Handle click on suggested tag to add it as AI-generated tag
  const handleSuggestedTagClick = (tag: string) => {
    addTag(tag, "ai");
  };

  return (
    <div>
      {/* Input field for adding user tags */}
      <div className="flex flex-wrap items-center gap-2 mb-2">
        <Input
          value={tagInput}
          placeholder="Add tags..."
          onKeyDown={handleKeyDown}
          onChange={handleInputChange}
          className="flex-1 min-w-[90px] max-w-[280px] bg-white"
        />
        {/* Display user-added tags */}
        {tags
          .filter((tag) => tag.origin === "user")
          .map((tag, index) => (
            <div
              key={index}
              className="flex text-xs items-center gap-2 bg-gray-200 px-2 py-1 rounded"
            >
              <button
                onClick={() => removeTag(tag.label)}
                className="text-gray-600 hover:text-gray-900"
              >
                <XIcon className="h-3 w-3" />
              </button>
              {tag.label}
            </div>
          ))}
      </div>
      {/* Button for generating AI tags */}
      <div className="flex flex-wrap items-center gap-2 mb-2">
        <button
          className="px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 transition-all shadow-sm font-medium"
          onClick={fetchSuggestedTags}
        >
          Generate My Tags
        </button>
        {/* Display AI-generated tags */}
        {tags
          .filter((tag) => tag.origin === "ai")
          .map((tag, index) => (
            <div
              key={index}
              className="flex text-xs items-center gap-2 bg-purple-200 text-purple-800 px-2 py-1 rounded"
            >
              <button
                onClick={() => removeTag(tag.label)}
                className="text-purple-600 hover:text-purple-900"
              >
                <XIcon className="h-3 w-3" />
              </button>
              {tag.label}
            </div>
          ))}
      </div>
      {/* Display suggested tags for the user to add */}
      {suggestedTags && suggestedTags.length > 0 && (
        <div className="mt-4">
          <h4>Suggested Tags:</h4>
          <div className="flex flex-wrap gap-2 mt-2">
            {suggestedTags.map((tag, index) => (
              <button
                key={index}
                onClick={() => handleSuggestedTagClick(tag)}
                className="text-xs bg-purple-200 text-purple-800 px-2 py-1 rounded hover:bg-purple-300"
              >
                {tag}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default TagManager;
