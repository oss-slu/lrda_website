name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - openai_tags
      - memoryleak
      - december-sprint
  pull_request:
    branches:
      - main
      - openai_tags
      - memoryleak
      - december-sprint

permissions:
  contents: read
  actions: read
  deployments: write      # Required for Netlify deployment status

jobs:
  # Job 1: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.20.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:unit --silent --no-coverage
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: "mock-api-key-for-ci"
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: "mock-domain.firebaseapp.com"
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: "mock-project-id"
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: "mock-project.appspot.com"
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
          NEXT_PUBLIC_FIREBASE_APP_ID: "1:123456789:web:abcdef"
          NEXT_PUBLIC_RERUM_PREFIX: "https://store.rerum.io/v1"
          NEXT_PUBLIC_OPENAI_API_KEY: "mock-openai-key"
          NEXT_PUBLIC_OPENAI_API_URL: "https://api.openai.com/v1"
          CI: "true"
          # Suppress console output in CI
          SUPPRESS_CONSOLE: "true"

  # Job 2: E2E Tests (includes build)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.20.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Build the application
        run: pnpm build
        env:
          CI: true
          NEXT_PUBLIC_FIREBASE_API_KEY: "ci-mock-key"
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: "ci-mock-domain"
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: "ci-mock-project"
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: "ci-mock-bucket"
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
          NEXT_PUBLIC_FIREBASE_APP_ID: "ci-mock-app-id"
          NEXT_PUBLIC_RERUM_PREFIX: "ci-mock-prefix"
          NEXT_PUBLIC_OPENAI_API_KEY: "ci-mock-openai-key"
          NEXT_PUBLIC_OPENAI_API_URL: "https://api.openai.com/v1/chat/completions"

      - name: Start the application
        run: |
          pnpm start &
          sleep 10
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run Playwright tests
        run: pnpm exec playwright test --project=chromium
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  # Job 3: Deploy to Netlify (after all tests pass)
  # - Pull Requests: Deploy preview builds
  # - Push to main: Deploy to production
  # - Push to other branches: Deploy preview builds
  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    # Run on all PRs (including from forks) and pushes
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    # Allow workflow to run from forks (needed for PRs from external contributors)
    permissions:
      contents: read
      pull-requests: write  # Needed to comment on PRs with preview URL

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.20.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build the application
        run: pnpm build
        env:
          CI: true
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
          NEXT_PUBLIC_RERUM_PREFIX: ${{ secrets.NEXT_PUBLIC_RERUM_PREFIX }}
          NEXT_PUBLIC_OPENAI_API_KEY: ${{ secrets.NEXT_PUBLIC_OPENAI_API_KEY }}
          NEXT_PUBLIC_OPENAI_API_URL: ${{ secrets.NEXT_PUBLIC_OPENAI_API_URL }}

      - name: Setup Netlify CLI
        run: npm install -g netlify-cli

      - name: Setup GitHub CLI and jq (for PR comments and JSON parsing)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          # gh CLI is usually pre-installed in GitHub Actions runners

      - name: Validate Netlify secrets
        run: |
          if [ -z "${{ secrets.NETLIFY_AUTH_TOKEN }}" ]; then
            echo "::error::NETLIFY_AUTH_TOKEN secret is not set. Please configure it in repository settings."
            exit 1
          fi
          if [ -z "${{ secrets.NETLIFY_SITE_ID }}" ]; then
            echo "::error::NETLIFY_SITE_ID secret is not set. Please configure it in repository settings."
            exit 1
          fi
          echo "✓ Netlify secrets are configured"

      - name: Authenticate with Netlify
        run: |
          # Create Netlify config directory and auth file (non-interactive)
          mkdir -p ~/.config/netlify
          # Create config file with token (Netlify CLI reads this automatically)
          cat > ~/.config/netlify/config.json <<EOF
          {
            "auth": {
              "token": "$NETLIFY_AUTH_TOKEN"
            }
          }
          EOF
          echo "✓ Netlify authentication configured"
          # Verify config file exists (without printing token)
          if [ -f ~/.config/netlify/config.json ]; then
            echo "✓ Config file created successfully"
          else
            echo "::error::Failed to create Netlify config file"
            exit 1
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Deploy to Netlify
        id: netlify-deploy
        run: |
          # Create netlify state directory and link file (non-interactive)
          mkdir -p .netlify
          echo "{\"siteId\":\"$NETLIFY_SITE_ID\"}" > .netlify/state.json
          
          # Determine deployment type and deploy with explicit site ID
          # NETLIFY_AUTH_TOKEN is automatically used by Netlify CLI when set as env var
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # Pull requests always get preview deployments (works for all PRs, including from forks)
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_BRANCH="${{ github.event.pull_request.head.ref }}"
            echo "Deploying preview for PR #${PR_NUMBER} by @${PR_AUTHOR}"
            echo "Branch: ${PR_BRANCH}"
            DEPLOY_OUTPUT=$(netlify deploy --dir=.next --site="$NETLIFY_SITE_ID" --message="Preview: PR #${PR_NUMBER} by @${PR_AUTHOR} - ${PR_TITLE}" --json)
            echo "$DEPLOY_OUTPUT" | jq -r '.deploy_url // empty' > deploy_url.txt
            if [ -s deploy_url.txt ]; then
              PREVIEW_URL=$(cat deploy_url.txt)
              echo "🚀 Preview deployment ready: ${PREVIEW_URL}"
              # Optionally comment on PR (requires permissions: pull-requests: write)
              # Note: May not work for PRs from forks due to token restrictions
              if [ -n "$PREVIEW_URL" ]; then
                echo "::notice::Preview URL: ${PREVIEW_URL}"
                # Try to comment on PR (may fail for fork PRs, which is okay)
                COMMENT_BODY="🚀 **Preview deployment ready!**\n\n📍 **Preview URL:** ${PREVIEW_URL}\n📝 **Branch:** \`${PR_BRANCH}\`\n👤 **Author:** @${PR_AUTHOR}"
                gh pr comment "$PR_NUMBER" --body "$COMMENT_BODY" 2>&1 || echo "Note: Could not post PR comment (this is normal for PRs from forks)"
              fi
            fi
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            # Push to main = production deployment
            echo "Deploying to production..."
            netlify deploy --prod --dir=.next --site="$NETLIFY_SITE_ID" --message="Production deploy from main - ${{ github.sha }}" --json
          else
            # Push to other branches = preview deployment
            echo "Deploying preview for branch: ${{ github.ref_name }}"
            netlify deploy --dir=.next --site="$NETLIFY_SITE_ID" --message="Preview: ${{ github.ref_name }} - ${{ github.sha }}" --json
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

